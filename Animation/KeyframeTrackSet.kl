// We use this file to expose KeyframeTrackSet methods not available as DFGs as well as to implement new methods
require Animation;

/// \dfgPresetFolder Animation\KeyframeTrackSet
function KeyframeTrackSet emptyVec3KeyframeTrackSet(in String name, in Vec3 defaultValue, in Integer flags) {
  return KeyframeTrackSet(name, defaultValue, flags);
}

/// \dfgPresetFolder Animation\KeyframeTrackSet
function KeyframeTrackSet emptyQuatKeyframeTrackSet(in String name, in Quat defaultValue, in Integer flags) {
  return KeyframeTrackSet(name, defaultValue, flags);
}

/// \dfgPresetFolder Animation\KeyframeTrackSet
function setVec3TrackSetValues(io KeyframeTrackSet this, in Scalar time, in Vec3 value) {
  this.setTrackValues(time,value);
}

/// \dfgPresetFolder Animation\KeyframeTrackSet
function KeyframeTrackSet[] emptyArrayFromPose(in IPose pose, in Integer flags) {
  Size bones = Pose(pose).skeleton.getNumBones();
  KeyframeTrackSet trackSetArray[];

  for (Size i = 0; i < bones; i++) {
    String boneName = Pose(pose).skeleton.getBone(i).name;
    Xfo boneXfo = Pose(pose).getBoneXfo(i);
    Size parentID = Pose(pose).skeleton.getBone(i).parentIndex;
    if (parentID > -1) {
      Xfo parent = Pose(pose).getBoneXfo(parentID);
      boneXfo = parent.inverse() * boneXfo;
    }

    trackSetArray.push(KeyframeTrackSet(boneName, boneXfo, flags));
  }

  return trackSetArray;
}

/// \dfgPresetFolder Animation\KeyframeTrackSet
function setPoseTrackSetArrayValues(io KeyframeTrackSet trackSetArray[], in Scalar time, in IPose pose) {
  Size bones = Pose(pose).skeleton.getNumBones();

  for (Size i = 0; i < bones; i++) {
    String boneName = Pose(pose).skeleton.getBone(i).name;
    Xfo boneXfo = Pose(pose).getBoneXfo(i);
    Size parentID = Pose(pose).skeleton.getBone(i).parentIndex;
    if (parentID > -1) {
      Xfo parent = Pose(pose).getBoneXfo(parentID);
      boneXfo = parent.inverse() * boneXfo;
    }

    trackSetArray[i].setTrackValues(time, boneXfo);
  }
}