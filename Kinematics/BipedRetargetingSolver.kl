require FileIO;
require JSON;
require Characters;

object BipedRetargetingSolver {
  Boolean drawDebug;
  Scalar scaleFactor;
  Character inCharacter;
  Character outCharacter;
  FilePath inNameTemplate;
  FilePath outNameTemplate;
  Scalar inRefFrame;
  Scalar outRefFrame;
  IPose inRefPose;
  IPose outRefPose;

  String luWorld[];
  String luRequired[];
  String luSpine[];
  String luAuxilary[];

  JSONDictValue inWorldNames;
  JSONDictValue outWorldNames;
  JSONDictValue inRequiredNames;
  JSONDictValue outRequiredNames;
  JSONDictValue inSpineNames;
  JSONDictValue outSpineNames;
  JSONDictValue inAuxilaryNames;
  JSONDictValue outAuxilaryNames;

  Index inWorldToId[String];
  String inWorldToName[Index];
  Index outWorldToId[String];
  String outWorldToName[Index];
  Index inBoneToId[String];
  String inBoneToName[Index];
  Index outBoneToId[String];
  String outBoneToName[Index];
  Index inSpineToId[String];
  String inSpineToName[Index];
  Index outSpineToId[String];
  String outSpineToName[Index];

  Xfo offsetToInput[];
  Boolean validFlags[];
};

/// \dfgPresetTitle BipedRetargetingSolver_Constructor
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Kinematics\BipedRetargtingSolver
function BipedRetargetingSolver(
  ) {

}

/// \dfgPresetTitle BipedRetargetingSolver_Init
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Kinematics\BipedRetargtingSolver
function BipedRetargetingSolver.init!(
  in ICharacter inCharacter,
  in ICharacter outCharacter,
  in FilePath inNameTemplate,
  in FilePath outNameTemplate,
  in Scalar inRefFrame,
  in Scalar outRefFrame
  ) {
  // initiating default values
  this.inCharacter = inCharacter;
  this.outCharacter = outCharacter;
  this.inNameTemplate = inNameTemplate;
  this.outNameTemplate = outNameTemplate;

  // initiating indices mapping
  this.fillLookups();
  this.fillMappingNames();
  this.fillMappingIndices();

  // setting reference frame and poses
  this.changeRefFrame(inRefFrame, outRefFrame);
}

/// \dfgPresetTitle BipedRetargetingSolver_Init2
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Kinematics\BipedRetargtingSolver
function BipedRetargetingSolver.init!(
  in ICharacter inCharacter,
  in ICharacter outCharacter,
  in FilePath inNameTemplate,
  in FilePath outNameTemplate,
  in IPose inRefPose,
  in IPose outRefPose
  ) {
  // initiating default values
  this.inCharacter = inCharacter;
  this.outCharacter = outCharacter;
  this.inNameTemplate = inNameTemplate;
  this.outNameTemplate = outNameTemplate;

  // initiating indices mapping
  this.fillLookups();
  this.fillMappingNames();
  this.fillMappingIndices();

  // setting reference frame and poses
  this.changeRefPose(inRefPose, outRefPose);
}

/// \dfgPresetOmit
function BipedRetargetingSolver.changeRefFrame!(
  in Scalar inRefFrame,
  in Scalar outRefFrame
  ) {
  this.inRefFrame = inRefFrame;
  this.outRefFrame = outRefFrame;
  IPose inRefPose = this.inCharacter.setClipPoseTime(inRefFrame).getPose().clone();
  IPose outRefPose = this.outCharacter.setClipPoseTime(outRefFrame).getPose().clone();

  this.changeRefPose(inRefPose, outRefPose);
}

/// \dfgPresetOmit
function BipedRetargetingSolver.changeRefPose!(
  in IPose inRefPose,
  in IPose outRefPose
  ) {
  // first we store the new refPoses
  this.inRefPose = inRefPose;
  this.outRefPose = outRefPose;

  // now we store the offsets from this ref poses
  this.offsetToInput.resize(this.outCharacter.skeleton.getNumBones());
  // first world offsets
  for(name in this.inWorldToId) {
    Index inId = this.inWorldToId[name];
    Index outId = this.outWorldToId[name];
    
    Xfo riXfo = this.inRefPose.getBoneXfo(inId);
    Xfo roXfo = this.outRefPose.getBoneXfo(outId);
    
    this.offsetToInput[outId] = riXfo.inverse()*roXfo;
  }
  // then spine offsets
  for(name in this.inSpineToId) {
    // Get mapped bone's id and parent
    Index id = this.outSpineToId[name];
    Index parent = Pose(this.outRefPose).skeleton.getBone(id).parentIndex;
    Index inputId = this.inSpineToId[name];
    Index inParentId = Pose(this.inRefPose).skeleton.getBone(inputId).parentIndex;
    
    // Get mapped bone's local xfo
    Xfo inRefLocalXfo();
    Xfo inLocalXfo();    
    if(inParentId > -1 && inParentId < 4294967295)
      inRefLocalXfo = Pose(this.inRefPose).getBoneXfo(inParentId).inverse()*Pose(this.inRefPose).getBoneXfo(inputId);
    else
      inRefLocalXfo = Pose(this.inRefPose).getBoneXfo(inputId);
    
    // Get original offset to parent bone
    Xfo outRefLocalXfo;
    if(parent > -1 && parent < 4294967295)
      outRefLocalXfo = Pose(this.outRefPose).getBoneXfo(parent).inverse()*Pose(this.outRefPose).getBoneXfo(id);
    else
      outRefLocalXfo = Pose(this.outRefPose).getBoneXfo(id);
      
    // Get the original offset rotation between mapping bones
    Quat refInQuat = inRefLocalXfo.ori;
    Quat refOutQuat = outRefLocalXfo.ori;
    this.offsetToInput[id] = Xfo(refInQuat.inverse()*refOutQuat);
  }
  // then all the other bones' offsets
  for(name in this.inBoneToId) {
    // Get mapped bone's id and parent
    Index id = this.outBoneToId[name];
    Index parent = Pose(this.outRefPose).skeleton.getBone(id).parentIndex;
    Index inputId = this.inBoneToId[name];
    Index inParentId = Pose(this.inRefPose).skeleton.getBone(inputId).parentIndex;
    
    // Get mapped bone's local xfo
    Xfo inRefLocalXfo();
    Xfo inLocalXfo();    
    if(inParentId > -1 && inParentId < 4294967295)
      inRefLocalXfo = Pose(this.inRefPose).getBoneXfo(inParentId).inverse()*Pose(this.inRefPose).getBoneXfo(inputId);
    else
      inRefLocalXfo = Pose(this.inRefPose).getBoneXfo(inputId);
    
    // Get original offset to parent bone
    Xfo outRefLocalXfo;
    if(parent > -1 && parent < 4294967295)
      outRefLocalXfo = Pose(this.outRefPose).getBoneXfo(parent).inverse()*Pose(this.outRefPose).getBoneXfo(id);
    else
      outRefLocalXfo = Pose(this.outRefPose).getBoneXfo(id);
      
    // Get the original offset rotation between mapping bones
    Quat refInQuat = inRefLocalXfo.ori;
    Quat refOutQuat = outRefLocalXfo.ori;
    this.offsetToInput[id] = Xfo(refInQuat.inverse()*refOutQuat);
  }
}

/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Kinematics\BipedRetargtingSolver
function IPose BipedRetargetingSolver.getInputReferencePose() {
  return this.inRefPose;
}


/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Kinematics\BipedRetargtingSolver
function IPose BipedRetargetingSolver.getOutputReferencePose() {
  return this.outRefPose;
}

function IPose BipedRetargetingSolver.solve!(
  in Boolean drawDebug,
  in Boolean matchSourcePos,
  in IPose _inPose,
  in IPose _outPose
  ) {

  IPose inPose = _inPose.clone();
  IPose outPose = _outPose.clone();

  Xfo scaleXfo(this.scaleFactor, this.scaleFactor, this.scaleFactor, 0, 0, 0, 0, 0, 0);
  
  Scalar inHeight = this.inRefPose.getBoneXfo(this.inWorldToId['Hips']).tr.y;
  Scalar outHeight = this.outRefPose.getBoneXfo(this.outWorldToId['Hips']).tr.y;
  Scalar heightFactor = outHeight/inHeight;
  Xfo sclHeight(heightFactor, heightFactor, heightFactor, 0, 0, 0, 0, 0, 0);

  // world xfo retargeting
  for(name in this.inWorldToId) {
    Index inId = this.inWorldToId[name];
    Index outId = this.outWorldToId[name];
    
    Xfo ixfo = inPose.getBoneXfo(inId);
    Xfo oxfo = outPose.getBoneXfo(outId);   

    if(name == 'Reference')
      oxfo = ixfo;
    else {  
      Xfo riXfo = this.inRefPose.getBoneXfo(inId);
      Xfo roXfo = this.outRefPose.getBoneXfo(outId); 
      Xfo offset = riXfo.inverse()*roXfo;
      offset = sclHeight*offset;
      offset.sc=Vec3(1,1,1);
      oxfo = sclHeight*ixfo;
      oxfo.sc=Vec3(1,1,1);
      oxfo = scaleXfo*oxfo;
      if(matchSourcePos) {
        oxfo.tr.x = ixfo.tr.x;
        oxfo.tr.z = ixfo.tr.z;
      }
    }

    outPose.setBoneXfo(outId, oxfo);
  }
  
  // bone orientation retargeting
  Boolean validFlags[];
  validFlags.resize(Pose(outPose).skeleton.getNumBones()); 
  this.validFlags = validFlags;

  for(id in this.outSpineToName) {
    this.updateBoneOri(id, this.inSpineToId, this.outSpineToName, outPose);
  }
  
  for(id in this.outBoneToName) { 
    this.updateBoneOri(id, this.inBoneToId, this.outBoneToName, outPose);
  }

  return outPose;
}

/// \dfgPresetTitle BipedRetargetingSolver_Solve
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Kinematics\BipedRetargtingSolver
function BipedRetargetingSolver.solve!(
  in Boolean drawDebug,
  in Boolean matchSourcePos,
  in Scalar scaleFactor,
  in ICharacter inCharacter,
  in ICharacter outCharacter,
  in FilePath inNameTemplate,
  in FilePath outNameTemplate,
  in Scalar inRefFrame,
  in Scalar outRefFrame,
  out IPose retargetPose
  ) {
  // check if needs initiating mapping or updating reference pose values
  if(inNameTemplate.string() != this.inNameTemplate.string() || outNameTemplate.string() != this.outNameTemplate.string())
    this.init(inCharacter, outCharacter, inNameTemplate, outNameTemplate, inRefFrame, outRefFrame);
  else if(this.inCharacter.getName() != inCharacter.getName() || this.outCharacter.getName() != outCharacter.getName())
    this.init(inCharacter, outCharacter, inNameTemplate, outNameTemplate, inRefFrame, outRefFrame);  
  else if(inRefFrame != this.inRefFrame || outRefFrame != this.outRefFrame)
    this.changeRefFrame(inRefFrame, outRefFrame);
  else if(scaleFactor != this.scaleFactor)
    this.changeRefFrame(inRefFrame, outRefFrame);

  // get poses
  IPose inPose = this.inCharacter.getPose().clone();
  IPose outPose = this.outCharacter.getPose().clone().reset();

  // set scale
  this.scaleFactor = scaleFactor;

  // retarget
  retargetPose = this.solve(drawDebug, matchSourcePos, inPose, outPose);
}

/// \dfgPresetTitle BipedRetargetingSolver_Solve2
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Kinematics\BipedRetargtingSolver
function BipedRetargetingSolver.solve!(
  in Boolean drawDebug,
  in Boolean matchSourcePos,
  in Scalar scaleFactor,
  in ICharacter inCharacter,
  in ICharacter outCharacter,
  in FilePath inNameTemplate,
  in FilePath outNameTemplate,
  in IPose inRefPose,
  in IPose outRefPose,
  out IPose retargetPose
  ) {
  // check if needs initiating mapping or updating reference pose values
  if(inNameTemplate.string() != this.inNameTemplate.string() || outNameTemplate.string() != this.outNameTemplate.string())
    this.init(inCharacter, outCharacter, inNameTemplate, outNameTemplate, inRefPose, outRefPose);
  else if(this.inCharacter.getName() != inCharacter.getName() || this.outCharacter.getName() != outCharacter.getName())
    this.init(inCharacter, outCharacter, inNameTemplate, outNameTemplate, inRefPose, outRefPose);  
  else if(inRefPose != this.inRefPose || outRefPose != this.outRefPose)
    this.changeRefPose(inRefPose, outRefPose);
  else if(scaleFactor != this.scaleFactor)
    this.changeRefPose(inRefPose, outRefPose);

  // get poses
  IPose inPose = this.inCharacter.getPose().clone();
  IPose outPose = this.outCharacter.getPose().clone().reset();

  // set scale
  this.scaleFactor = scaleFactor;

  // retarget
  retargetPose = this.solve(drawDebug, matchSourcePos, inPose, outPose);
}


/// \dfgPresetOmit
function BipedRetargetingSolver.updateBoneOri!(
  in Index id,
  in Index inBoneToId[String],
  in String outBoneToName[Index],
  io IPose outPose
  ){
  
  Xfo result;
  IPose inPose = this.inCharacter.getPose();
  
  if(~this.validFlags[id]) {
    Index parent = Pose(outPose).skeleton.getBone(id).parentIndex;
    if(parent > -1 && parent < 4294967295){
      if(~this.validFlags[parent]) {
        this.updateBoneOri(parent, inBoneToId, outBoneToName, outPose);
      }
    }
        
    if(outBoneToName.has(id)) {
      // Get mapped bone's id and parent
      Index inputId = inBoneToId[outBoneToName[id]];
      Index inParentId = Pose(inPose).skeleton.getBone(inputId).parentIndex;
      
      // Get mapped bone's local xfo
      Xfo inRefLocalXfo();
      Xfo inLocalXfo();    
      if(inParentId > -1 && inParentId < 4294967295)
        inLocalXfo = Pose(inPose).getBoneXfo(inParentId).inverse()*Pose(inPose).getBoneXfo(inputId);
      else
        inLocalXfo = Pose(inPose).getBoneXfo(inputId);
      
      // Get original offset to parent bone
      Xfo outRefLocalXfo;
      if(parent > -1 && parent < 4294967295)
        outRefLocalXfo = Pose(this.outRefPose).getBoneXfo(parent).inverse()*Pose(this.outRefPose).getBoneXfo(id);
      else
        outRefLocalXfo = Pose(this.outRefPose).getBoneXfo(id);
        
      // Set new orientation
      outRefLocalXfo.ori = this.offsetToInput[id].ori*inLocalXfo.ori;

      // Set new bone xfo
      if(parent > -1 && parent < 4294967295)
        result = outPose.getBoneXfo(parent)*outRefLocalXfo;
      else
        result = outRefLocalXfo;
      outPose.setBoneXfo(id, result);      
    }

    this.validFlags[id] = true;
  }
}

/// \dfgPresetOmit
function BipedRetargetingSolver.fillLookups!() {
  // prepare lookup arrays
    // world pos. xfos
  this.luWorld.push("Reference");
  this.luWorld.push("LeftFootFloor");
  this.luWorld.push("RightFootFloor");
  this.luWorld.push("LeftHandFloor");
  this.luWorld.push("RightHandFloor");
    // required joints
  this.luRequired.push("Hips");
  this.luRequired.push("LeftUpLeg");
  this.luRequired.push("LeftLeg");
  this.luRequired.push("LeftFoot");
  this.luRequired.push("RightUpLeg");
  this.luRequired.push("RightLeg");
  this.luRequired.push("RightFoot");
  this.luRequired.push("LeftArm");
  this.luRequired.push("LeftForeArm");
  this.luRequired.push("LeftHand");
  this.luRequired.push("RightArm");
  this.luRequired.push("RightForeArm");
  this.luRequired.push("RightHand");
  this.luRequired.push("Head");
    // spine (variable n. of joints)
  this.luSpine.push("Spine");
  for(Size i=1; i<10; i++) {
    this.luSpine.push("Spine" + i);
  }
    // auxilary joints
  this.luAuxilary.push("LeftToeBase");
  this.luAuxilary.push("RightToeBase");
  this.luAuxilary.push("LeftShoulder");
  this.luAuxilary.push("RightShoulder");
  this.luAuxilary.push("Neck");
  this.luAuxilary.push("LeftFingerBase");
  this.luAuxilary.push("RightFingerBase");
}

/// \dfgPresetOmit
function BipedRetargetingSolver.fillMappingNames!() {
  // read input template
  TextReader reader = TextReader(this.inNameTemplate.string());
  String data = reader.readAll();
  JSONDoc inDoc();
  inDoc.parse(data);
  this.inWorldNames  = inDoc.root.get('worldPos');
  this.inRequiredNames  = inDoc.root.get('required');
  this.inSpineNames  = inDoc.root.get('spine');
  this.inAuxilaryNames  = inDoc.root.get('auxilary');
  
  // read output template
  reader = TextReader(this.outNameTemplate.string());
  data = reader.readAll();
  JSONDoc outDoc();
  outDoc.parse(data);
  this.outWorldNames  = outDoc.root.get('worldPos');
  this.outRequiredNames  = outDoc.root.get('required');
  this.outSpineNames  = outDoc.root.get('spine');
  this.outAuxilaryNames  = outDoc.root.get('auxilary');
}

/// \dfgPresetOmit
function BipedRetargetingSolver.fillMappingIndices!() {
  // clear previous dict entries
  this.inWorldToId.clear();
  this.inWorldToName.clear();
  this.outWorldToId.clear();
  this.outWorldToName.clear();
  this.inBoneToId.clear();
  this.inBoneToName.clear();
  this.outBoneToId.clear();
  this.outBoneToName.clear();
  this.inSpineToId.clear();
  this.inSpineToName.clear();
  this.outSpineToId.clear();
  this.outSpineToName.clear();

  // create temporary dicts for required and auxilar bones
  Index inRequiredToId[String];
  String inRequiredToName[Index];
  Index outRequiredToId[String];
  String outRequiredToName[Index];
  Index inAuxilaryToId[String];
  String inAuxilaryToName[Index];
  Index outAuxilaryToId[String];
  String outAuxilaryToName[Index];

  // fill name to indices, and indices to name dictionaries
  this.mapNamesToIndices(this.luWorld, this.inWorldNames, this.outWorldNames, this.inWorldToId, this.inWorldToName, this.outWorldToId, this.outWorldToName, true, false);
  this.mapNamesToIndices(this.luRequired, this.inRequiredNames, this.outRequiredNames, inRequiredToId, inRequiredToName, outRequiredToId, outRequiredToName, true, true);
  this.mapNamesToIndices(this.luSpine, this.inSpineNames, this.outSpineNames, this.inSpineToId, this.inSpineToName, this.outSpineToId, this.outSpineToName, true, false);
  this.mapNamesToIndices(this.luAuxilary, this.inAuxilaryNames, this.outAuxilaryNames, inAuxilaryToId, inAuxilaryToName, outAuxilaryToId, outAuxilaryToName, true, false);

  // concatenate required and auxilary bones
  for(name in inRequiredToId) {
    Index id = inRequiredToId[name];
    this.inBoneToId.set(name, id);
    this.inBoneToName.set(id, name);
  }
  for(name in inAuxilaryToId) {
    Index id = inAuxilaryToId[name];
    this.inBoneToId[name] = id;
    this.inBoneToName[id] = name;
  }
  for(name in outRequiredToId) {
    Index id = outRequiredToId[name];
    this.outBoneToId[name] = id;
    this.outBoneToName[id] = name;
  }
  for(name in outAuxilaryToId) {
    Index id = outAuxilaryToId[name];
    this.outBoneToId[name] = id;
    this.outBoneToName[id] = name;
  }

  // move hips to world xfo
  this.inWorldToId.set('Hips', this.inBoneToId['Hips']);
  this.inWorldToName.set(this.inBoneToId['Hips'], 'Hips');
  this.outWorldToId.set('Hips', this.outBoneToId['Hips']);
  this.outWorldToName.set(this.outBoneToId['Hips'], 'Hips');
  this.inBoneToName.delete(this.inBoneToId['Hips']);
  this.inBoneToId.delete('Hips');
  this.outBoneToName.delete(this.outBoneToId['Hips']);
  this.outBoneToId.delete('Hips');
}

/// \dfgPresetOmit
function BipedRetargetingSolver.mapNamesToIndices!(
  in String lookup[],
  in JSONDictValue inData,
  in JSONDictValue outData,
  out Index inToId[String],
  out String inToName[Index],
  out Index outToId[String],
  out String outToName[Index],
  in Boolean pair,
  in Boolean enforce,
  ){
  String inNames[];
  String outNames[];
  for(Size i=0; i<lookup.size(); i++){
    String l = lookup[i];
    if(pair) {
      if(inData.has(l) && outData.has(l)) {
        inNames.push(inData.getString(l));
        outNames.push(outData.getString(l));

        Index inId = this.inCharacter.skeleton.findBone(inData.getString(l));
        inToId.set(l, inId);
        inToName.set(inId, l);
        Index outId = this.outCharacter.skeleton.findBone(outData.getString(l));
        outToId.set(l, outId);
        outToName.set(outId, l);
      }
      else if(enforce && ~inData.has(l))
        setError(l + ' node is mandatory, but was not found in the input mapping file.');
      else if(enforce && ~outData.has(l))
        setError(l + ' node is mandatory, but was not found in the output mapping file.');
    }
    else {
      if(inData.has(l)) {
        inNames.push(inData.getString(l));

        Index inId = this.inCharacter.skeleton.findBone(inData.getString(l));
        inToId.set(l, inId);
        inToName.set(inId, l);
      }
      else if(enforce && ~inData.has(l))
        setError(l + ' node is mandatory, but was not found in the input mapping file.');
      if(outData.has(l)){
        outNames.push(outData.getString(l));

        Index outId = this.outCharacter.skeleton.findBone(outData.getString(l));
        outToId.set(l, outId);
        outToName.set(outId, l);
      }
      else if(enforce && ~inData.has(l))
        setError(l + ' node is mandatory, but was not found in the input mapping file.');  
  }
  }
  Integer inIds[] = boneNameArrayToIDArray(this.inCharacter.skeleton,inNames);
  Integer outIds[] = boneNameArrayToIDArray(this.outCharacter.skeleton,outNames);

  // for(Size i=0; i<inIds.size(); i++) {
  //   inToId.set(inNames[i], inIds[i]);
  //   inToName.set(inIds[i], inNames[i]);
  // }

  // for(Size i=0; i<outIds.size(); i++) {
  //   outToId.set(outNames[i], outIds[i]);
  //   outToName.set(outIds[i], outNames[i]);
  // }

}